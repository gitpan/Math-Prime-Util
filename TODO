
- Examine behavior near 32-bit limit on 32-bit machines.
  (done for factoring)

- segment sieve should itself use a segment for its primes.
  Today we'd need sqrt(2^64) max = 140MB.  Segmenting would yield under 1MB.

- Add test to check maxbits in compiled library vs. Perl

- Figure out documentation solution for PP.pm

- Is the current PP.pm setup the way we want to do it?

- Move .c / .h files into separate directory.
  version does it in a painful way.  Something simpler to be had?

- finish test suite for bignum.  Work on making it faster.

- Test all routines for numbers on word-size boundary, or ranges that cross.

- Test all functions return either native or bigints.  Functions that return
  raw MPU::GMP results will return strings, which isn't right.

- An assembler version of mulmod for i386 would be _really_ helpful for
  all the non-x86-64 Intel machines.

- More efficient Mertens.  The current version has poor growth.

- It may be possible to have a more efficient ranged totient.  We're using
  the sieve up to n/2, which is better than most people seem to use, but I'm
  not completely convinced we can't do better.

- Implement S2 calculation for LMO prime count.

- Big features:
   - LMO prime count
   - QS factoring

- Figure out a way to make the internal FOR_EACH_PRIME macros use a segmented
  sieve.

- Refactor where functions exist in .c.  Lots of primality tests in factor.c.

- Rewrite 23-primality-proofs.t for new format (keep some of the old tests?).
